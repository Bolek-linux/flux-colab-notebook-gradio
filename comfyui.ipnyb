{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EXGAVghD0Wfu"
      },
      "source": [
        "# ComfyCloud v0.1.2\n",
        "\n",
        "**ComfyUI + ComfyUI Manager + AnimateDiff (Evolved)**\n",
        "\n",
        "Forked from [ltdrdata/ComfyUI-Manager](https://colab.research.google.com/github/ltdrdata/ComfyUI-Manager/blob/main/notebooks/comfyui_colab_with_manager.ipynb), modified by [@dreammachineai](https://instagram.com/dreammachineai)<br>\n",
        "modified by [@WilliamJiamin](https://youtube.com/@learn-digital-art)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tmhrsnS_0Nb8"
      },
      "source": [
        "## Notes\n",
        "\n",
        "- Uncheck `INSTALL_COMFYUI_MANAGER`, `INSTALL_ANIMATEDIFF`, and `INSTALL_CUSTOM_NODES_DEPENDENCIES` after first run if `USE_GOOGLE_DRIVE` is checked.\n",
        "\n",
        "I Recommend just check everything, because it will auto skip.\n",
        "\n",
        "- Model, VAE, Controlnet et al. resources saved to Google Drive if `USE_GOOGLE_DRIVE` is checked\n",
        "- Resources downloaded from https://civitai.com/ need the file name and extension specified in `resource_name`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aaaaaaaaaa"
      },
      "source": [
        "## Install Dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bbbbbbbbbb",
        "cellView": "form"
      },
      "outputs": [],
      "source": [
        "# #@title Environment Setup\n",
        "\n",
        "from pathlib import Path\n",
        "\n",
        "OPTIONS = {}\n",
        "\n",
        "USE_GOOGLE_DRIVE = True  #@param {type:\"boolean\"}\n",
        "UPDATE_COMFY_UI = True  #@param {type:\"boolean\"}\n",
        "INSTALL_COMFYUI_MANAGER = True  #@param {type:\"boolean\"}\n",
        "INSTALL_ANIMATEDIFF = False  #@param {type:\"boolean\"}\n",
        "INSTALL_CUSTOM_NODES_DEPENDENCIES = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['USE_GOOGLE_DRIVE'] = USE_GOOGLE_DRIVE\n",
        "OPTIONS['UPDATE_COMFY_UI'] = UPDATE_COMFY_UI\n",
        "OPTIONS['INSTALL_COMFYUI_MANAGER'] = INSTALL_COMFYUI_MANAGER\n",
        "OPTIONS['INSTALL_ANIMATEDIFF'] = INSTALL_ANIMATEDIFF\n",
        "OPTIONS['INSTALL_CUSTOM_NODES_DEPENDENCIES'] = INSTALL_CUSTOM_NODES_DEPENDENCIES\n",
        "\n",
        "current_dir = !pwd\n",
        "AI_WORKSPACE = f\"{current_dir[0]}/AI\"\n",
        "COMFY_WORKSPACE = f\"{current_dir[0]}/AI/ComfyUI\"\n",
        "\n",
        "if OPTIONS['USE_GOOGLE_DRIVE']:\n",
        "  !echo \"Mounting Google Drive...\"\n",
        "  %cd /\n",
        "\n",
        "  from google.colab import drive\n",
        "  drive.mount('/content/drive')\n",
        "\n",
        "  AI_WORKSPACE = \"/content/drive/MyDrive/AI\"\n",
        "  COMFY_WORKSPACE = \"/content/drive/MyDrive/AI/ComfyUI\"\n",
        "\n",
        "import os\n",
        "!echo \"Creating AI workspace (if it doesn't exist)\"\n",
        "os.makedirs(AI_WORKSPACE, exist_ok=True)\n",
        "\n",
        "%cd $AI_WORKSPACE\n",
        "\n",
        "![ ! -d $COMFY_WORKSPACE ] && echo -= Initial setup ComfyUI =- && git clone https://github.com/comfyanonymous/ComfyUI\n",
        "%cd $COMFY_WORKSPACE\n",
        "\n",
        "if OPTIONS['UPDATE_COMFY_UI']:\n",
        "  !echo \"-= Updating ComfyUI =-\"\n",
        "  !git pull\n",
        "\n",
        "!echo \"-= Install dependencies =-\"\n",
        "# MODIFIED: Removed hardcoded xformers URL and install it correctly, letting pip resolve the version.\n",
        "!pip install -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cu121\n",
        "!pip install xformers onnxruntime-gpu color-matcher simpleeval\n",
        "\n",
        "if OPTIONS['INSTALL_COMFYUI_MANAGER']:\n",
        "  %cd custom_nodes\n",
        "  ![ ! -d ComfyUI-Manager ] && echo -= Initial setup ComfyUI-Manager =- && git clone https://github.com/ltdrdata/ComfyUI-Manager\n",
        "  %cd ComfyUI-Manager\n",
        "  !git pull\n",
        "\n",
        "if OPTIONS['INSTALL_ANIMATEDIFF']:\n",
        "  %cd ../\n",
        "  ![ ! -d ComfyUI-AnimateDiff-Evolved ] && echo -= Initial setup AnimateDiff =- && git clone https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved\n",
        "  %cd ComfyUI-AnimateDiff-Evolved\n",
        "  !git pull\n",
        "\n",
        "%cd $COMFY_WORKSPACE\n",
        "\n",
        "if OPTIONS['INSTALL_CUSTOM_NODES_DEPENDENCIES']:\n",
        "  !pwd\n",
        "  !echo \"-= Install custom nodes dependencies =-\"\n",
        "  ![ -f \"custom_nodes/ComfyUI-Manager/scripts/colab-dependencies.py\" ] && python \"custom_nodes/ComfyUI-Manager/scripts/colab-dependencies.py\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cccccccccc"
      },
      "source": [
        "## Download resources (models, VAEs, LoRAs, Controlnets et al.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dddddddddd",
        "cellView": "form"
      },
      "outputs": [],
      "source": [
        "#@markdown ###Download standard resources\n",
        "#@markdown (NOTE: These resources are saved if \"Using Google Drive\" is checked, so you only need to run once).\n",
        "\n",
        "OPTIONS = {}\n",
        "\n",
        "#@markdown **FLUX Model (Recommended for 15GB Drive)**\n",
        "DOWNLOAD_FLUX_MODEL = True #@param {type:\"boolean\"}\n",
        "OPTIONS['DOWNLOAD_FLUX_MODEL'] = DOWNLOAD_FLUX_MODEL\n",
        "if OPTIONS['DOWNLOAD_FLUX_MODEL']:\n",
        "  # Main UNet Model (~5GB)\n",
        "  !wget -c https://huggingface.co/stabilityai/flux-1-schnell/resolve/main/flux-1-schnell.safetensors -P ./models/checkpoints/\n",
        "  # Text Encoder Model (~5GB) - Note: ComfyUI needs this in a specific folder\n",
        "  !wget -c https://huggingface.co/stabilityai/flux-1-schnell/resolve/main/text_encoder.safetensors -P ./models/text_encoder/\n",
        "  # Tokenizer files (small)\n",
        "  os.makedirs('./models/clip/', exist_ok=True)\n",
        "  !wget -c https://huggingface.co/stabilityai/flux-1-schnell/raw/main/tokenizer/merges.txt -P ./models/clip/\n",
        "  !wget -c https://huggingface.co/stabilityai/flux-1-schnell/raw/main/tokenizer/special_tokens_map.json -P ./models/clip/\n",
        "  !wget -c https://huggingface.co/stabilityai/flux-1-schnell/raw/main/tokenizer/tokenizer_config.json -P ./models/clip/\n",
        "  !wget -c https://huggingface.co/stabilityai/flux-1-schnell/raw/main/tokenizer/vocab.json -P ./models/clip/\n",
        "\n",
        "#@markdown --- \n",
        "#@markdown ### SDXL\n",
        "#@markdown ### I recommend these workflow examples: https://comfyanonymous.github.io/ComfyUI_examples/sdxl/\n",
        "\n",
        "#@markdown **Models**\n",
        "\n",
        "SDXL_1_0_BASE_AND_REFINER = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SDXL_1_0_BASE_AND_REFINER'] = SDXL_1_0_BASE_AND_REFINER\n",
        "\n",
        "if OPTIONS['SDXL_1_0_BASE_AND_REFINER']:\n",
        "  !wget -c https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/resolve/main/sd_xl_base_1.0.safetensors -P ./models/checkpoints/\n",
        "  !wget -c https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0/resolve/main/sd_xl_refiner_1.0.safetensors -P ./models/checkpoints/\n",
        "\n",
        "SD_2_0_MODELS = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SD_2_0_MODELS'] = SD_2_0_MODELS\n",
        "\n",
        "if OPTIONS['SD_2_0_MODELS']:\n",
        "  !wget -c https://huggingface.co/stabilityai/stable-diffusion-2-1-base/resolve/main/v2-1_512-ema-pruned.safetensors -P ./models/checkpoints/\n",
        "  !wget -c https://huggingface.co/stabilityai/stable-diffusion-2-1/resolve/main/v2-1_768-ema-pruned.safetensors -P ./models/checkpoints/\n",
        "\n",
        "SD_1_5_MODEL = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SD_1_5_MODEL'] = SD_1_5_MODEL\n",
        "\n",
        "if OPTIONS['SD_1_5_MODEL']:\n",
        "  !wget -c https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.ckpt -P ./models/checkpoints/\n",
        "\n",
        "#@markdown **VAEs**\n",
        "\n",
        "SDXL_1_0_VAE = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SDXL_1_0_VAE'] = SDXL_1_0_VAE\n",
        "\n",
        "if OPTIONS['SDXL_1_0_VAE']:\n",
        "  !wget -c https://civitai.com/api/download/models/183894 -O ./models/vae/sdxl-vae-fp16-fix.safetensors #sdxl-vae-fp16-fix.safetensors\n",
        "\n",
        "SD_1_5_VAE = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SD_1_5_VAE'] = SD_1_5_VAE\n",
        "\n",
        "if OPTIONS['SD_1_5_VAE']:\n",
        "  !wget -c https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors -P ./models/vae/\n",
        "\n",
        "#@markdown **T2I Adapters**\n",
        "\n",
        "T2I_ADAPTER = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['T2I_ADAPTER'] = T2I_ADAPTER\n",
        "\n",
        "if OPTIONS['T2I_ADAPTER']:\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_depth_sd14v1.pth -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_seg_sd14v1.pth -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_sketch_sd14v1.pth -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_keypose_sd14v1.pth -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_openpose_sd14v1.pth -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_color_sd14v1.pth -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_canny_sd14v1.pth -P ./models/controlnet/\n",
        "\n",
        "T2I_STYLES_MODEL = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['T2I_STYLES_MODEL'] = T2I_STYLES_MODEL\n",
        "\n",
        "if OPTIONS['T2I_STYLES_MODEL']:\n",
        "  !wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_style_sd14v1.pth -P ./models/style_models/\n",
        "\n",
        "#@markdown **Controlnets**\n",
        "\n",
        "SDXL_1_0_CONTROLNETS = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SDXL_1_0_CONTROLNETS'] = SDXL_1_0_CONTROLNETS\n",
        "\n",
        "if OPTIONS['SDXL_1_0_CONTROLNETS']:\n",
        "  !wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-canny-rank256.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-depth-rank256.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-recolor-rank256.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-sketch-rank256.safetensors -P ./models/controlnet/\n",
        "\n",
        "SD_1_5_CONTROLNETS = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['SD_1_5_CONTROLNETS'] = SD_1_5_CONTROLNETS\n",
        "\n",
        "if OPTIONS['SD_1_5_CONTROLNETS']:\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11e_sd15_ip2p_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11e_sd15_shuffle_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_canny_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11f1p_sd15_depth_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_inpaint_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_lineart_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_mlsd_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_normalbae_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_openpose_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_scribble_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_seg_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_softedge_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15s2_lineart_anime_fp16.safetensors -P ./models/controlnet/\n",
        "  !wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11u_sd15_tile_fp16.safetensors -P ./models/controlnet/\n",
        "\n",
        "#@markdown **Upscalers**\n",
        "\n",
        "ESRGAN_UPSCALER = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['ESRGAN_UPSCALER'] = ESRGAN_UPSCALER\n",
        "\n",
        "if OPTIONS['ESRGAN_UPSCALER']:\n",
        "  !wget -c https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -P ./models/upscale_models/\n",
        "  !wget -c https://huggingface.co/sberbank-ai/Real-ESRGAN/resolve/main/RealESRGAN_x2.pth -P ./models/upscale_models/\n",
        "  !wget -c https://huggingface.co/sberbank-ai/Real-ESRGAN/resolve/main/RealESRGAN_x4.pth -P ./models/upscale_models/\n",
        "\n",
        "#@markdown **AnimateDiff**\n",
        "\n",
        "AD_MOTION_MODELS = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['AD_MOTION_MODELS'] = AD_MOTION_MODELS\n",
        "\n",
        "if OPTIONS['AD_MOTION_MODELS']:\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/mm_sd_v14.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/models/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/mm_sd_v15.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/models/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/mm_sd_v15_v2.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/models/\n",
        "\n",
        "AD_MOTION_LORAS = False  #@param {type:\"boolean\"}\n",
        "OPTIONS['AD_MOTION_LORAS'] = AD_MOTION_LORAS\n",
        "\n",
        "if OPTIONS['AD_MOTION_LORAS']:\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_PanLeft.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_PanRight.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_RollingAnticlockwise.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_RollingClockwise.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_TiltDown.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_TiltUp.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_ZoomIn.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\n",
        "  !wget -c https://huggingface.co/guoyww/animatediff/resolve/main/v2_lora_ZoomOut.ckpt -P ./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/"
      ]
    },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k6Gx-X7Rnwc_"
      },
      "outputs": [],
      "source": [
        "#@markdown ###Download custom resource (OPTIONAL)\n",
        "resource_url = \"\" #@param {type:\"string\"}\n",
        "#@markdown (NOTE: Specify file name and extension for civitai resources)\n",
        "resource_name = \"\" #@param {type:\"string\"}\n",
        "output_path = \"./models/checkpoints/\" # @param [\"./models/checkpoints/\", \"./models/vae/\", \"./models/loras/\", \"./models/controlnet/\", \"./models/style_models/\", \"./models/upscale_models/\", \"./custom_nodes/ComfyUI-AnimateDiff-Evolved/models/\", \"./custom_nodes/ComfyUI-AnimateDiff-Evolved/motion_lora/\", \"./models/ipadapter/\"]\n",
        "\n",
        "if resource_url and output_path:\n",
        "  if resource_name:\n",
        "    !wget -c \"{resource_url}\" -O \"{output_path}{resource_name}\"\n",
        "  else:\n",
        "    !wget -c \"{resource_url}\" -P \"{output_path}\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kkkkkkkkkkkkkkk"
      },
      "source": [
        "## Run ComfyUI\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jjjjjjjjjjjjjj"
      },
      "outputs": [],
      "source": [
        "#@markdown **Connecting to Cloudflare...**\n",
        "\n",
        "!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\n",
        "!dpkg -i cloudflared-linux-amd64.deb\n",
        "\n",
        "import subprocess\n",
        "import threading\n",
        "import time\n",
        "import socket\n",
        "import urllib.request\n",
        "\n",
        "def iframe_thread(port):\n",
        "  while True:\n",
        "      time.sleep(0.5)\n",
        "      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
        "      result = sock.connect_ex(('127.0.0.1', port))\n",
        "      if result == 0:\n",
        "        break\n",
        "      sock.close()\n",
        "  print(\"\\nComfyUI finished loading, trying to launch cloudflared (if it gets stuck here cloudflared is having issues)\\n\")\n",
        "\n",
        "  p = subprocess.Popen([\"cloudflared\", \"tunnel\", \"--url\", \"http://127.0.0.1:{}\".format(port)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
        "  for line in p.stderr:\n",
        "    l = line.decode()\n",
        "    if \"trycloudflare.com \" in l:\n",
        "      cf_url = l[l.find(\"http\"):]\n",
        "      print(\"This is the URL to access ComfyUI:\", cf_url, end='')\n",
        "\n",
        "threading.Thread(target=iframe_thread, daemon=True, args=(8188,)).start()\n",
        "\n",
        "!python main.py --dont-print-server"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
